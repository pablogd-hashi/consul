#!/bin/bash
set -euxo pipefail

echo "This is the setup script"

until [ -f /opt/instruqt/bootstrap/host-bootstrap-completed ]
do
    sleep 1
done

# Enable bash completion for kubectl
kubectl completion bash | tee /etc/bash_completion.d/kubectl > /dev/null

git clone https://github.com/dcanadillas/consul-partitions-gke.git

# # esac

CLUSTER1="hashi-cluster-0"
CLUSTER2="hashi-cluster-1"
API_GW_VERSION="0.5.2"
CONSUL_LICENSE="$HC_CONSUL_LICENSE"
CONSUL_K8S_VERSION="1.3.0"
CONSUL_VERSION="1.18.2"
CONSUL_TOKEN="ConsulR0cks"
DC1="dc1"
DC2="dc2"

echo "export CONSUL_HTTP_TOKEN=$CONSUL_TOKEN" >> /root/.bashrc
echo "export CONSUL_LICENSE=$CONSUL_LICENSE" >> /root/.bashrc


# Fetching locations in a variable for the two clusters
CLUSTER1_ZONE="$(gcloud container clusters list --filter="name:$CLUSTER1" --format json | jq -r .[].location)"
CLUSTER2_ZONE="$(gcloud container clusters list --filter="name:$CLUSTER2" --format json | jq -r .[].location)"
# CTX1=$1
# CTX2=$2

# We set two different Kubeconfig files
KUBECONFIG1="/root/${CLUSTER1}-ctx.config"
KUBECONFIG2="/root/${CLUSTER2}-ctx.config"
touch $KUBECONFIG1
touch $KUBECONFIG2


# Creating 2 different Kubeconfigs by getting credentials from GKE with GCloud
KUBECONFIG=$KUBECONFIG1 gcloud container clusters get-credentials $CLUSTER1 --zone $CLUSTER1_ZONE
KUBECONFIG=$KUBECONFIG2 gcloud container clusters get-credentials $CLUSTER2 --zone $CLUSTER2_ZONE
echo -e "\n==> Information from K8s Cluster 1..."
kubectl cluster-info --kubeconfig="$KUBECONFIG1"

echo -e "\n==> Information from K8s Cluster 2..."
kubectl cluster-info --kubeconfig=$KUBECONFIG2

mkdir -p /root/consul/consul_values

install_consul () {
  local datacenter=$1

cat - <<EOF | tee /root/consul/consul_values/$1.yaml > /dev/null
global:
  enabled: true
  datacenter: $datacenter
  name: consul
 image: hashicorp/consul-enterprise:$CONSUL_VERSION
  logLevel: debug
  # imageEnvoy: envoyproxy/envoy:v1.24.0
  # Consul Enteprise Section
  enterpriseLicense:
    secretName: "consul-ent-license"
    secretKey: "key"
    enableLicenseAutoload: true
  tls:
    enabled: true
    enableAutoEncrypt: true
    verify: true
  acls:
    manageSystemACLs: true
    bootstrapToken:
      secretName: consul-bootstrap-token
      secretKey: token
  metrics:
    enabled: true
    enableGatewayMetrics: true
  
server:
  enabled: true
  replicas: 3
  bootstrapExpect: 3
  # affinity:
  extraConfig: |
    {
      "acl": {
        "tokens": {
          "initial_management": "$CONSUL_TOKEN",
          "default": "$CONSUL_TOKEN"
        }
      }
    }
ui:
  enabled: true
  service:
    enabled: true

connectInject:
  enabled: true
  
controller:
  enabled: true

prometheus:
  enabled: true

EOF
 # consul-k8s install -namespace consul -f /root/consul/consul_values/$1.yaml -kubeconfig $2
}

mkdir -p /root/consul/apps

create_apps () {

cat - <<EOF | tee /root/consul/apps/backend.yaml > /dev/null
# Service to expose service-b-v1
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: backend
  type: LoadBalancer
  ports:
  - name: http
    protocol: TCP
    port: 9090
    targetPort: 9090
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend
---
# service-b-v1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  labels:
    app: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
      annotations:
        "consul.hashicorp.com/connect-inject": "true"
        # "consul.hashicorp.com/transparent-proxy": "false"
        # "consul.hashicorp.com/connect-service-upstreams": "service-c-v1.default.tenant-2:9091"
    spec:
      serviceAccountName: backend
      containers:
      - name: backend
        image: nicholasjackson/fake-service:v0.25.1
        ports:
        - containerPort: 9090
        env:
        - name: "LISTEN_ADDR"
          value: "0.0.0.0:9090"
        # - name: "UPSTREAM_URIS"
        #   value: "http://127.0.0.1:9091" 
          #Set value above if TProxy is off
          # value: "http://service-c.virtual.default.ns.tenant-1.ap.dc1.dc.consul:9091"
          #Set value above if TProxy is on: <service>.virtual.<namespace>.ns.<partition>.ap.<datacenter>.dc.<domain>                   
        - name: "NAME"
          value: "backend"
        - name: "MESSAGE"
          value: "Hello Backend World"
EOF

cat - <<EOF | tee /root/consul/apps/frontend.yaml > /dev/null
# Service to expose service-a
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: frontend
  type: LoadBalancer
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 9090
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: frontend
---
# service-a
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      annotations:
        "consul.hashicorp.com/connect-inject": "true"
        # "consul.hashicorp.com/transparent-proxy": "false"
        # "consul.hashicorp.com/connect-service-upstreams": "backend.default.default:9091,backend-v2.default.default:9092"
    spec:
      serviceAccountName: frontend
      containers:
      - name: frontend
        image: nicholasjackson/fake-service:v0.25.1
        ports:
        - containerPort: 9090
        # readinessProbe:
        #   httpGet:
        #     port: 9090
        #     path: /healthz
        #   periodSeconds: 5
        env:
        - name: "LISTEN_ADDR"
          value: "0.0.0.0:9090"
        - name: "UPSTREAM_URIS"
          # value: "http://127.0.0.1:9091" 
          # Set value above if TProxy is off
          value: "http://backend.virtual.dc2-default.consul:9090,http://backend.virtual.dc2-second.consul:9090"
          #Set value above if TProxy is on: <service>.virtual.<namespace>.ns.<partition>.ap.<datacenter>.dc.<domain>                   
        - name: "NAME"
          value: "frontend"
        - name: "MESSAGE"
          value: "Hello World"
EOF

}

# Creating the requires namespaces and secrets
echo -e "\n==> Configuring K8s cluster $CLUSTER1"
configk8s $KUBECONFIG1
echo -e "\n==> Configuring K8s cluster $CLUSTER2"
configk8s $KUBECONFIG2

# ---- Installing Consul ----
echo -e "\n==> Installing Consul \"$DC1\" in K8s cluster \"$CLUSTER1\""
install_consul $DC1 $KUBECONFIG1
echo -e "\n==> Installing Consul \"$DC2\" in K8s cluster \"$CLUSTER2\""
install_consul $DC2 $KUBECONFIG2 
# ---------------------------

# ---- Creating Applications ----

echo -e "\n==> Creating backend and frontend configuration files"

create_apps
# ---------------------------
