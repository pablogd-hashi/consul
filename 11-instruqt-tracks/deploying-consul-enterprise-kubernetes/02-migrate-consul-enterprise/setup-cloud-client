#!/bin/bash
set -euxo pipefail

echo "This is the setup script"

until [ -f /opt/instruqt/bootstrap/host-bootstrap-completed ]
do
    sleep 1
done

# Enable bash completion for kubectl
kubectl completion bash | tee /etc/bash_completion.d/kubectl > /dev/null

# # esac

CLUSTER1="hashi-cluster-0"
CLUSTER2="hashi-cluster-1"
API_GW_VERSION="0.5.2"
CONSUL_LICENSE="$HC_CONSUL_LICENSE"
CONSUL_K8S_VERSION="1.3.0"
CONSUL_VERSION="1.18.2"
CONSUL_TOKEN="ConsulR0cks"
DC1="dc1"
DC2="dc2"

echo "export CONSUL_HTTP_TOKEN=$CONSUL_TOKEN" >> /root/.bashrc
echo "export CONSUL_LICENSE=$CONSUL_LICENSE" >> /root/.bashrc


# Fetching locations in a variable for the two clusters
CLUSTER1_ZONE="$(gcloud container clusters list --filter="name:$CLUSTER1" --format json | jq -r .[].location)"
CLUSTER2_ZONE="$(gcloud container clusters list --filter="name:$CLUSTER2" --format json | jq -r .[].location)"
# CTX1=$1
# CTX2=$2

# We set two different Kubeconfig files
KUBECONFIG1="/root/${CLUSTER1}-ctx.config"
KUBECONFIG2="/root/${CLUSTER2}-ctx.config"
touch $KUBECONFIG1
touch $KUBECONFIG2


# Creating 2 different Kubeconfigs by getting credentials from GKE with GCloud
KUBECONFIG=$KUBECONFIG1 gcloud container clusters get-credentials $CLUSTER1 --zone $CLUSTER1_ZONE
KUBECONFIG=$KUBECONFIG2 gcloud container clusters get-credentials $CLUSTER2 --zone $CLUSTER2_ZONE
echo -e "\n==> Information from K8s Cluster 1..."
kubectl cluster-info --kubeconfig="$KUBECONFIG1"

echo -e "\n==> Information from K8s Cluster 2..."
kubectl cluster-info --kubeconfig=$KUBECONFIG2

mkdir -p /root/consul/consul_values
rm -rf /root/consul/consul_values/dc1.yaml
rm -rf /root/consul/consul_values/dc2.yaml
upgrade_consul () {
  local datacenter=$1

cat - <<EOF | tee /root/consul/consul_values/ent_$1_.yaml > /dev/null
global:
  enabled: true
  datacenter: $datacenter
  name: consul
  image: hashicorp/consul-enterprise:$CONSUL_VERSION-ent
  logLevel: debug
  # imageEnvoy: envoyproxy/envoy:v1.24.0
  # Consul Enteprise Section
  enterpriseLicense:
    secretName: "consul-ent-license"
    secretKey: "key"
    enableLicenseAutoload: true
  tls:
    enabled: true
    enableAutoEncrypt: true
    verify: true
  acls:
    manageSystemACLs: true
    bootstrapToken:
      secretName: consul-bootstrap-token
      secretKey: token
  metrics:
    enabled: true
    enableGatewayMetrics: true
  
server:
  enabled: true
  replicas: 3
  bootstrapExpect: 3
  # affinity:
  extraConfig: |
    {
      "acl": {
        "tokens": {
          "initial_management": "$CONSUL_TOKEN",
          "default": "$CONSUL_TOKEN"
        }
      }
    }
ui:
  enabled: true
  service:
    enabled: true

connectInject:
  enabled: true
  
controller:
  enabled: true

prometheus:
  enabled: true

EOF
 # consul-k8s install -namespace consul -f /root/consul/consul_values/$1.yaml -kubeconfig $2
}


# ---- Installing Consul ----
echo -e "\n==> Installing Consul \"$DC1\" in K8s cluster \"$CLUSTER1\""
upgrade_consul $DC1 $KUBECONFIG1
echo -e "\n==> Installing Consul \"$DC2\" in K8s cluster \"$CLUSTER2\""
upgrade_consul $DC2 $KUBECONFIG2 
# ---------------------------
